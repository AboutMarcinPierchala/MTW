@inject IViewInventoriesByNameUseCases ViewInventoriesByNameUseCases

<div class="input-group">
    <input class="form-control"
               placeholder="search by name"
               @bind-value="this.searchFilter" @bind-value:event="oninput">
    </input>
    <button type="button" class="btn-success input-group-text" @onclick="SearchHandle">Search</button>
</div>
@if(inventories is not null && inventories.Count > 0)
{
    <div class="pseudo-dropdown-list">
        <ul>
            @foreach (var inv in inventories)
            {
                <li @key="inv.InventoryId"
                @onclick="()=>{HandleSelectInventoryForProduct(inv);}">
                    @inv.InventoryName
                </li>
            }
        </ul>
    </div>
}

@code {
    [Parameter]
    public EventCallback<Inventory> OnInventorySelected { get; set; }

    private string _searchFilter;
    private string searchFilter 
    { 
        get=>_searchFilter;
        set
        {
            _searchFilter = value;
            SearchHandle();
        } 
    }
    private List<Inventory> inventories = new();

    private async Task SearchHandle()
    {
        inventories = (await ViewInventoriesByNameUseCases.ExecuteAsync(this.searchFilter)).ToList();
        StateHasChanged();//rerender after bring data from real Db with a delay
    }

    private async Task HandleSelectInventoryForProduct(Inventory inventory)
    {
        await OnInventorySelected.InvokeAsync(inventory);
        inventories.Clear();
    }

}
