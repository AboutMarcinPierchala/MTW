@page "/editProduct/{id:int}"
@using MTW.Plugins.InMemory
@using MTW.UseCases.PluginInterfaces
@inject IEditProductUseCase EditProductUseCase
@inject IProductRepository ProductRepository
@inject NavigationManager NavigationManager 

<h3>Edit Product</h3>

<br />
<br />
@if(this.product is not null)
{
    <EditForm Model="product" FormName="formProductEditParams" OnValidSubmit="Edit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        <InputNumber @bind-Value="product.ProductId" hidden></InputNumber>
        <div class="form-group">
            <label for="name">Product Name</label>
            <InputText id="name"
                       @bind-Value="product.ProductName"
                       class="form-control">
            </InputText>
        </div>
        <div class="form-group">
            <label for="price">Product Price</label>
            <InputNumber id="price"
                         @bind-Value="product.Price"
                         class="form-control">
            </InputNumber>
        </div>
        <div class="form-group">
            <label for="quantity">Product Quantity</label>
            <InputNumber id="quantity"
                         @bind-Value="product.Quantity"
                         class="form-control">
            </InputNumber>
        </div>
        <br />
        <button type="submit" class="btn btn-danger">Save</button>
        <a href="/productList" type="button" class="btn btn-secondary">Cancel</a>
    </EditForm>
}

@code {

    [Parameter]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    private Product? product { get; set; }


    protected override async Task OnParametersSetAsync()
    {
        product ??= await ProductRepository.GetProductByIdAsync(this.Id);
    }

    private async Task Edit()
    {
        if(product is not null)
        {
            await EditProductUseCase.ExecuteAsync(this.Id, product);
        }        
        NavigationManager.NavigateTo("/productList");
    }
}
